{"version":3,"sources":["utils/index.ts","pages/dashboard/transactions/details.tsx"],"names":["AddressReducer","address","split","reduce","a","c","i","arr","length","Details","selectedAccount","useAppSelector","SelectSelectedAccount","currencies","SelectCurrencies","useTransactionProcess","transactions","params","useParams","useState","info","setInfo","notFound","setNotFound","tx","setTx","useEffect","txFind","find","s","hash","toLowerCase","id","paidTo","totalAmount","walletAddress","isBatch","ERC20MethodIds","batchRequest","isSwap","swap","fee","fromWei","parseFloat","rawData","gas","gasPrice","toString","tokenSymbol","date","dateFormat","Date","parseInt","timeStamp","batch","Array","from","Set","payments","map","to","amount","coinAddress","name","price","toPrecision","amountIn","coinIn","amountOutMin","coinOutMin","single","className","TransactionDetailInput","undefined","window","navigator","clipboard","writeText","displayName","nameActivation","selected","coinUrl","CoinsURL","None","onSelect","w","list","disableAddressDisplay","title","children","url","onClick","open","console","log"],"mappings":"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","file":"static/js/14.49b01354.chunk.js","sourcesContent":["\n\nexport const AddressReducer = (address: string)=>{\n    return address.split('').reduce((a, c, i, arr) => {\n        return i < 10 || (arr.length - i) < 4 ? a + c : a.split('.').length - 1 < 6 ? a + '.' : a\n    }, '')\n}","import dateFormat from \"dateformat\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ClipLoader } from \"react-spinners\";\nimport Dropdown from \"../../../components/general/dropdown\";\n// import { useLazyGetTransactionsQuery } from \"../../redux/api\";\nimport { useAppSelector } from \"../../../redux/hooks\";\nimport { SelectCurrencies } from \"../../../redux/reducers/currencies\";\nimport { Coins, CoinsURL, TransactionFeeTokenName } from \"../../../types/coins\";\nimport { DropDownItem } from \"../../../types/dropdown\";\nimport { AddressReducer } from 'utils'\nimport { Transactions } from \"../../../types/sdk\";\nimport _ from \"lodash\";\nimport { SelectSelectedAccount } from \"../../../redux/reducers/selectedAccount\";\nimport { useTransactionProcess } from \"hooks\";\nimport { ERC20MethodIds, IBatchRequest, IFormattedTransaction, ISwap, ITransfer } from \"hooks/useTransactionProcess\";\nimport { fromWei } from \"web3-utils\";\n\nconst Details = () => {\n    const selectedAccount = useAppSelector(SelectSelectedAccount)\n    const currencies = useAppSelector(SelectCurrencies)\n\n    const [transactions] = useTransactionProcess()\n\n    let params = useParams<{ id: string }>() as { id: string }\n\n    const [info, setInfo] = useState<{\n        paidTo: string,\n        totalAmount: string,\n        fee: string,\n        date: string,\n        walletAddress: string[],\n\n    }>()\n\n    const [notFound, setNotFound] = useState(false)\n\n    const [tx, setTx] = useState<IFormattedTransaction>()\n\n    useEffect(() => {\n        if (transactions) {\n            const txFind = transactions.find(s => s.hash.toLowerCase() === params.id)\n            if (txFind) {\n                const isBatch = txFind.id === ERC20MethodIds.batchRequest;\n                const isSwap = txFind.id === ERC20MethodIds.swap;\n                let paidTo, totalAmount, walletAddress;\n                let fee = `${fromWei((parseFloat(txFind.rawData.gas) * parseFloat(txFind.rawData.gasPrice)).toString(), \"ether\")} ${!isBatch && txFind.rawData.tokenSymbol === \"cUSD\" ? \"cUSD\" : \"CELO\"}`;\n                let date = dateFormat(new Date(parseInt(txFind.rawData.timeStamp) * 1e3), \"dd/mm/yyyy hh:MM:ss\")\n\n                if (isBatch) {\n                    const batch = txFind as IBatchRequest\n                    paidTo = `${Array.from(new Set((batch).payments.map(s => s.to))).length} people`\n                    totalAmount = `${batch.payments.reduce((a, c) => (parseFloat(fromWei(c.amount, 'ether')) * (currencies[c.coinAddress.name]?.price ?? 1)) + a, 0).toPrecision(4)} USD`\n                    walletAddress = Array.from(new Set(batch.payments.map(s => s.to)))\n                } else if (isSwap) {\n                    const swap = txFind as ISwap\n                    paidTo = \"Swap\"\n                    totalAmount = `${fromWei(swap.amountIn, 'ether')} ${swap.coinIn.name} -> ${parseFloat(fromWei(swap.amountOutMin, 'ether')).toPrecision(4)} ${swap.coinOutMin.name}`\n                    walletAddress = [\"Ubeswap\"]\n                } else {\n                    const single = txFind as ITransfer\n                    paidTo = \"1 person\"\n                    totalAmount = `${(parseFloat(fromWei(single.amount, 'ether')) * (currencies[single.rawData.tokenSymbol]?.price ?? 1)).toPrecision(4)} USD`\n                    walletAddress = single.to.toLowerCase() === selectedAccount.toLowerCase() ? [single.rawData.from] : [single.to]\n                }\n\n                setInfo({\n                    date,\n                    fee,\n                    paidTo,\n                    totalAmount,\n                    walletAddress\n                })\n                setTx(txFind)\n            } else setNotFound(true)\n        }\n    }, [transactions, params.id])\n\n    return <>\n        <div>\n            <div className=\"w-full shadow-custom px-5 py-14 rounded-xl flex flex-col items-center justify-center\">\n                <div className=\"font-bold text-xl sm:text-2xl\">\n                    Transaction Details\n                </div>\n                {tx && info && !notFound ? <div className=\"flex flex-col sm:grid sm:grid-cols-3 py-5 gap-14 w-full\">\n                    {\n                        TransactionDetailInput(\"Transaction Hash\", `${tx.hash}`, `https://explorer.celo.org/tx/${tx.hash}/token-transfers`)\n                    }\n                    {TransactionDetailInput(\"Paid To\", info.paidTo)}\n                    {TransactionDetailInput(\"Total Amount\", info.totalAmount)}\n                    {TransactionDetailInput(\"Transaction Fee\", `${info.fee}`)}\n                    {TransactionDetailInput(\"Created Date & Time\", info.date)}\n                    {TransactionDetailInput(\"Status\", <div className=\"flex items-center gap-x-2\"><div className=\"bg-green-400 h-[10px] w-[10px] rounded-full\"></div>Completed</div>)}\n                    {info.walletAddress.length === 1 ?\n                        TransactionDetailInput(\"Wallet Address\", `${AddressReducer(info.walletAddress[0])}`, undefined, () => window.navigator.clipboard.writeText(info.walletAddress[0]))\n                        :\n                        <Dropdown displayName=\"Wallet Address\" className=\"h-[75px] bg-greylish bg-opacity-10\" nameActivation={true} selected={{ name: \"Choose to copy an address\", coinUrl: CoinsURL.None }}\n                            onSelect={(w: DropDownItem) => {\n                                if (w.name) window.navigator.clipboard.writeText(w.name)\n                            }}\n                            list={[\n                                ...info.walletAddress.map(w => ({ name: w, coinUrl: CoinsURL.None, disableAddressDisplay: true })),\n                            ]} />}\n                </div> : <ClipLoader />}\n                {notFound && <div>There is no such transaction belongs to your address</div>}\n            </div>\n        </div>\n    </>\n}\n\nexport default Details;\n\n\nconst TransactionDetailInput = (title: string, children: JSX.Element | JSX.Element[] | string, url?: string, onClick?: () => void) => {\n\n    return <div className=\"bg-greylish bg-opacity-10 flex flex-col px-4 py-3 rounded-xl min-h-[75px]\">\n        <div className=\"text-sm text-greylish opacity-80\">\n            {title}\n        </div>\n        <div className={`font-bold text-lg truncate ${onClick && \"cursor-pointer\"} ${url && \"cursor-pointer\"}`} onClick={() => {\n            url ? window.open(url, '_blank') : console.log(\"Wish you more money :)\")\n        }}>\n            {children}\n        </div>\n        { }\n    </div>\n}"],"sourceRoot":""}