{"version":3,"sources":["components/general/modal.tsx","pages/dashboard/swap/index.tsx","API/useSwap.tsx"],"names":["Modal","children","onDisable","title","className","disableX","useEffect","document","querySelector","style","overflowY","onClick","top","window","scrollY","innerHeight","Swap","useState","Coins","cUSD","token1","setToken1","token1Amount","setToken1Amount","CELO","token2","setToken2","isMultisig","useMultisig","token1Input","useRef","appAmount","setAppAmount","fee","setFee","oneCoinPrice","setOneCoinPrice","isOpen","setOpen","isSetting","setSetting","value","label","selected","invisible","slippageArr","setSlippageArr","deadline","setDeadline","balances","useSelector","SelectBalances","isSuccess","selectStorage","selectSuccess","isError","selectError","dispatch","useDispatch","useContractKit","kit","address","isLoading","setLoading","Exchange","inputCoin","outputCoin","amount","slippage","a","provider","CeloProvider","inputAddress","contractAddress","Fetcher","fetchTokenData","ChainId","MAINNET","getAddress","input","outputAddress","output","contracts","getGoldToken","token","cEUR","cREAL","getStableToken","name","altToken","getErc20","addressesMain","ubeswapFactory","ubeswapRouter","ubeswapMoolaRouter","approve","web3","utils","toWei","send","sendFunc","waitReceipt","router","connection","eth","Contract","inputs","internalType","type","outputs","stateMutability","fetchPairData","pair","route","Route","amountIn","parseUnits","trade","Trade","TokenAmount","toString","TradeType","EXACT_INPUT","ubeRouter","Router","swapCallParameters","feeOnTransfer","allowedSlippage","Percent","recipient","ttl","methods","swapExactTokensForTokens","args","txx","from","sender","hash","transactionHash","Error","MinmumAmountOut","console","log","feeAmount","minimumAmountOut","parseFloat","BASE_FEE","JSBI","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","realizedLPFee","pairs","reduce","currentFee","multiply","undefined","priceImpactWithoutFeeFraction","priceImpact","numerator","denominator","inputAmount","raw","quotient","toSignificant","amountOut","fromWei","oneCoin","tradeOne","amountOutOne","minimumAmountOutOne","oneTokenValue","useSwap","change","find","item","Math","floor","data","error","startSwap","changeSuccess","activate","text","open","changeError","settingRef","useModalSideExit","src","ref","filter","s","map","index","arr","forEach","i","placeholder","length","min","step","max","onChange","event","target","w","parentClass","onSelect","nameActivation","list","Object","values","coinUrl","feeName","id","e","toFixed","current","token1_copy","token2_copy","token2_amount","alt","size","onClose","val"],"mappings":"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","file":"static/js/13.96207d46.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\n\nconst Modal = ({ children, onDisable, title, className, disableX = false }: { children?: JSX.Element | JSX.Element[], onDisable: React.Dispatch<React.SetStateAction<boolean>>, title?: string, className?: string, disableX?: boolean }) => {\n    useEffect(() => {\n        document.querySelector('body')!.style.overflowY = \"hidden\"\n        return () => {\n            document.querySelector('body')!.style.overflowY = \"\"\n        }\n    }, [])\n    return <>\n        <div className=\"w-full h-full !my-0 bg-white bg-opacity-60 absolute left-0 top-0 z-40\" onClick={() => onDisable(false)} style={{\n            top: `${window.scrollY}px`,\n        }}>\n        </div>\n        <div className={`absolute ${className} overflow-auto max-h-[75vh]  left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white w-[90%] sm:w-[60%] lg:w-auto lg:min-w-[33%] shadow-custom rounded-xl z-50`} style={{ top: `${window.scrollY + (window.innerHeight / 2)}px` }}>\n            <div className=\"relative px-5 py-10\">\n                {children}\n                {!(!title) && <div className=\"absolute right-full top-2 font-bold translate-x-[105%] w-1/2\">\n                    {title}\n                </div>}\n                {!disableX && <button onClick={() => onDisable(false)} className=\"absolute left-full top-0 translate-x-[-200%] translate-y-[25%] text-greylish opacity-45\">\n                    X\n                </button>}\n            </div>\n        </div>\n    </>\n}\n\nexport default Modal;","import Dropdown from \"components/general/dropdown\";\nimport { Coins } from \"types/coins\";\nimport { DropDownItem } from 'types'\nimport { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SelectBalances } from \"redux/reducers/currencies\";\nimport { selectStorage } from \"redux/reducers/storage\";\nimport { changeError, changeSuccess, selectError, selectSuccess } from \"redux/reducers/notificationSlice\";\nimport Success from \"components/general/success\";\nimport Error from \"components/general/error\";\nimport { ClipLoader } from \"react-spinners\";\nimport Modal from \"components/general/modal\";\nimport { useRefetchData, useModalSideExit } from 'hooks';\nimport useMultisig from \"hooks/useMultisig\";\nimport Button from \"components/button\";\nimport useSwap from \"API/useSwap\";\n// import { useGetConvertableTokenAmountMutation, useSwapCoinsMutation } from \"redux/api\";\n\nconst Swap = () => {\n    const [token1, setToken1] = useState<DropDownItem>(Coins.cUSD)\n    const [token1Amount, setToken1Amount] = useState<number>()\n    const [token2, setToken2] = useState<DropDownItem>(Coins.CELO)\n\n    const { isMultisig } = useMultisig()\n\n    const token1Input = useRef<HTMLInputElement>(null)\n\n    const [appAmount, setAppAmount] = useState<string>(\"0\")\n    const [fee, setFee] = useState<string>(\"\")\n    const [oneCoinPrice, setOneCoinPrice] = useState<string>(\"\")\n\n    const [isOpen, setOpen] = useState<boolean>(false)\n    const [isSetting, setSetting] = useState<boolean>(false)\n\n    const [slippageArr, setSlippageArr] = useState([\n        { value: 1, label: '0,1%', selected: false },\n        { value: 5, label: '0,5%', selected: true },\n        { value: 10, label: '1%', selected: false },\n        { value: 0, label: '0%', selected: false, invisible: true }\n    ])\n\n    const [deadline, setDeadline] = useState<number>(1.5)\n\n    const balances = useSelector(SelectBalances)\n    const storage = useSelector(selectStorage)\n    const isSuccess = useSelector(selectSuccess)\n    const isError = useSelector(selectError)\n\n    const dispatch = useDispatch()\n\n    // const [fetchCoin, { isLoading: coinLoading }] = useGetConvertableTokenAmountMutation()\n    // const [swap, { isLoading }] = useSwapCoinsMutation()\n    const { Exchange, MinmumAmountOut, isLoading } = useSwap()\n\n    const change = async (value?: number) => {\n        if (token1.value && token2.value) {\n            try {\n                const data = await MinmumAmountOut(\n                    Coins[token1.name as keyof Coins],\n                    Coins[token2.name as keyof Coins],\n                    (value || (token1Amount ?? 0)).toString(),\n                    slippageArr.find(item => item.selected)!.value.toString(),\n                    Math.floor(deadline * 60)\n                )\n                setAppAmount(data.minimumAmountOut)\n                setFee(data.feeAmount)\n                setOneCoinPrice(data.oneTokenValue)\n            } catch (error) {\n                console.error(error)\n            }\n\n        }\n    }\n\n    const startSwap = async () => {\n        if (token1.value && token2.value && token1Amount && token1Amount > 0) {\n            try {\n                const data = await Exchange(\n                    Coins[token1.name as keyof Coins],\n                    Coins[token2.name as keyof Coins],\n                    token1Amount.toString(),\n                    slippageArr.find(item => item.selected)!.value.toString(),\n                    Math.floor(deadline * 60)\n                )\n                dispatch(changeSuccess({\n                    activate: true, text: <div className=\"flex flex-col items-center\">\n                        <div className=\"font-semobold text-xl\">Successfully Swapped</div>\n                        <div className=\"text-primary text-sm font-semibold\" onClick={() => window.open(`https://explorer.celo.org/tx/${data.hash}/token-transfers`, '_blank')} > View on Celo Explorer</div>\n                    </div>\n                }))\n                setOpen(false)\n  \n            } catch (error) {\n                console.error(error)\n                dispatch(changeError({ activate: true }))\n            }\n\n        }\n    }\n\n    useEffect(() => {\n        if (token1 && token2) {\n            change()\n        }\n    }, [token1, token2, token1Amount, slippageArr])\n\n    const settingRef = useModalSideExit(isSetting, setSetting)\n\n\n    const changeSwap = () => {\n        const token1_copy = { ...token1 }\n        const token2_copy = { ...token2 }\n        const token2_amount = parseFloat(parseFloat(appAmount).toFixed(2))\n        setToken1(token2_copy)\n        setToken2(token1_copy)\n        \n        setToken1Amount(token2_amount)\n        if (token1Input.current) {\n            token1Input.current.value = token2_amount.toString();\n        }\n    }\n\n    if (isMultisig) return <div className=\"text-center py-2\">We are working on bringing Swap into MultiSig account. Please, select a wallet account until we finish it</div>\n\n    return <div className=\"flex items-center justify-center\">\n        <div className=\"flex flex-col w-[50%]\">\n            <div className=\"shadow-custom rounded-xl bg-white pt-3 pb-10 px-3 flex flex-col space-y-1\">\n                <div className=\"flex justify-between\">\n                    <div className=\"font-bold font-xl pb-2\">Swap</div>\n                    <div className=\"relative\">\n                        <img src=\"/icons/settings.svg\" className=\"cursor-pointer\" onClick={() => setSetting(!isSetting)} />\n                        {isSetting && <div ref={settingRef} className=\"absolute z-[300] shadow-custom bg-white rounded-xl min-w-[250px] left-0 translate-x-[-90%] bottom-0 translate-y-full p-3 text-sm\">\n                            <div className=\"flex flex-col space-y-4\">\n                                <div className=\"font-bold\">Transaction Settings</div>\n                                <div className=\"flex flex-col space-y-3\">\n                                    <div>Slippage tolerance</div>\n                                    <div className=\"flex space-x-1 px-2\">\n                                        {slippageArr.filter(s => !s.invisible).map((item, index) => <div key={index} onClick={() => {\n                                            const arr = [...slippageArr]\n                                            arr.forEach(i => i.selected = false)\n                                            arr[index].selected = true\n                                            setSlippageArr(arr)\n                                        }} className={`${item.selected ? \"bg-primary bg-opacity-100 text-white\" : \"\"} px-2 py-1 bg-greylish bg-opacity-10 cursor-pointer rounded-xl`}>{item.label}</div>)}\n                                        <div className=\"bg-greylish bg-opacity-10 rounded-xl flex items-center pl-3 pr-5 space-x-1\">\n                                            <input placeholder=\"0.5\" type=\"number\" value={((slippageArr[slippageArr.length - 1]!.value / 10) || undefined)} className=\"outline-none text-right bg-transparent max-w-[50px] unvisibleArrow\" min={0} step={\"any\"} max={100} onChange={(event) => {\n                                                const value = (event.target as HTMLInputElement).value\n                                                if (parseFloat(value) >= 0) {\n                                                    setSlippageArr(slippageArr.map((item, index) => {\n                                                        if (index === slippageArr.length - 1) {\n                                                            item.selected = true\n                                                            item.value = Math.max(0, Math.min(100, parseFloat(value)))\n                                                        } else item.selected = false\n                                                        return item\n                                                    }))\n                                                } else if (!value || value === \"0\") {\n                                                    setSlippageArr(slippageArr.map((item, index) => {\n                                                        if (index === slippageArr.length - 1) {\n                                                            item.selected = false\n                                                            item.value = 0\n                                                        } else if (index == 1) { item.selected = true } else item.selected = false\n                                                        return item\n                                                    }))\n                                                }\n                                            }} />\n                                            <span>%</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"flex flex-col space-y-3\">\n                                    <div>Transaction deadline</div>\n                                    <div className=\"flex space-x-1 px-2 items-center\">\n                                        <input type=\"number\" value={deadline === 1.5 ? undefined : deadline} onChange={(event) => {\n                                            const value = (event.target as HTMLInputElement).value\n                                            if (value) {\n                                                setDeadline(parseFloat(value))\n                                            } else setDeadline(1.5)\n                                        }} className=\"bg-greylish bg-opacity-10 rounded-xl py-1 w-[100px] outline-none px-2 text-right unvisibleArrow\" placeholder=\"1.5\" />\n                                        <div>minutes</div>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>}\n                    </div>\n                </div>\n                <div className=\"bg-greylish bg-opacity-10 items-center flex justify-between rounded-md py-3 px-3\">\n                    <div className=\"flex flex-col space-y-2 w-[130px]\">\n                        <div>\n                            <Dropdown onChange={(w: DropDownItem, selected: DropDownItem) => {\n                                if (w.value === token2.value) {\n                                    setToken2(selected)\n                                }\n                            }} parentClass=\"shadow-custom bg-white rounded-md\" onSelect={setToken1} className=\"border-none py-1 space-x-4 text-sm\" nameActivation={true} selected={token1} list={Object.values(Coins).map(w => ({ name: w.name, type: w.value, value: w.value, coinUrl: w.coinUrl, feeName: w.feeName, id: w.value, className: \"text-sm\" }))} />\n                        </div>\n                        <div>\n                            <input ref={token1Input} onChange={async (e) => { setToken1Amount(parseFloat((e.target.value))); await change(parseFloat((e.target.value))); }} type=\"number\" className=\"bg-transparent text-center outline-none unvisibleArrow max-w-[130px]\" placeholder=\"0\" min=\"0\" step=\"any\" />\n                        </div>\n                    </div>\n                    <div className=\"flex flex-col space-y-2 items-end\">\n                        <div>\n                            Balance: {token1 && token1.name && balances[token1.name as keyof typeof balances] ? (balances[token1.name as keyof typeof balances]?.amount.toFixed(2) ?? 0) : 0}\n                        </div>\n                        <div className=\"flex space-x-2\">\n                            <button className=\"shadow-custom bg-white px-2 py-1 rounded-xl text-xs\" onClick={\n                                () => {\n                                    if (balances && token1 && balances[token1.name as keyof typeof balances] && balances[token1.name as keyof typeof balances]!.amount > 0) {\n                                        const amount = balances[token1.name as keyof typeof balances]!.amount * 0.5\n                                        token1Input.current!.value = amount.toFixed(2)\n                                        setToken1Amount(amount)\n                                    }\n                                }\n                            }>\n                                50%\n                            </button>\n                            <button className=\"shadow-custom bg-white px-2 py-1 rounded-xl text-xs\" onClick={() => {\n                                if (balances && token1 && balances[token1.name as keyof typeof balances] && balances[token1.name as keyof typeof balances]!.amount > 0) {\n                                    const amount = balances[token1.name as keyof typeof balances]!.amount\n                                    token1Input.current!.value = amount.toFixed(2)\n                                    setToken1Amount(amount)\n                                }\n                            }}>\n                                MAX\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex items-center justify-center\">\n                    <div className=\"bg-greylish bg-opacity-10 px-3 py-1 rounded-lg cursor-pointer\" onClick={changeSwap}>\n                        <img src=\"/icons/arrowdown.svg\" alt=\"\" />\n                    </div>\n                </div>\n                <div className=\"flex bg-greylish bg-opacity-10 justify-between rounded-md py-3 px-3\">\n                    <div className=\"flex flex-col space-y-2 w-[130px]\">\n                        <div>\n                            <Dropdown onChange={(w: DropDownItem, selected: DropDownItem) => {\n                                if (w.value === token1.value) {\n                                    setToken1(selected)\n                                }\n                            }} parentClass=\"shadow-custom bg-white rounded-md\" onSelect={setToken2} className=\"border-none py-1 space-x-4 text-sm\" nameActivation={true} selected={token2} list={Object.values(Coins).map(w => ({ name: w.name, type: w.value, value: w.value, feeName: w.feeName, coinUrl: w.coinUrl, id: w.value, className: \"text-sm\" }))} />\n                        </div>\n                        <div>\n                            {!(!token1Amount) && (!isLoading ?\n                                <>\n                                    <div className=\"text-center outline-none unvisibleArrow\">\n                                        {parseFloat(appAmount).toFixed(2)}\n                                    </div>\n                                </> : <div className=\"text-center\"><ClipLoader size=\"24px\" /></div>)\n                            }\n                        </div>\n                    </div>\n                    <div className=\"flex flex-col items-end h-full\">\n                        <div className=\"text-right outline-none unvisibleArrow\">\n                            Balance: {token2 && token2.name && balances[token2.name as keyof typeof balances] ? (balances[token2.name as keyof typeof balances]?.amount.toFixed(2) ?? 0) : 0}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"px-8 py-3 font-extralight text-sm\">\n                <div className=\"flex justify-between\">\n                    <div>Rate:</div>\n                    <div className=\"flex\">1 {token1.name} = {!isLoading ? parseFloat(oneCoinPrice).toFixed(2) : <div className=\"px-3\"><ClipLoader size={18} /></div>} {token2.name}</div>\n                </div>\n                <div className=\"flex justify-between\">\n                    <div>Fee:</div>\n                    <div className=\"flex\">{!isLoading ? fee : <div className=\"px-3\"><ClipLoader size={18} /> </div>} {token1.name}</div>\n                </div>\n            </div>\n            <div className=\"text-center mx-8\">\n                <Button className=\"w-full\" onClick={() => setOpen(true)} isLoading={isLoading}>\n                    Swap\n                </Button>\n            </div>\n        </div>\n        {isOpen && <Modal onDisable={setOpen} title=\"Confirm Swap\" className=\"lg:left-[55.5%]\">\n            <div className=\"flex flex-col -mx-5 space-y-5\">\n                <div className=\"flex flex-col py-2 pb-10 space-y-7 border-b-2 px-5\">\n                    <div className=\"grid grid-cols-[7%,73%,20%] items-center\">\n                        <div>\n                            <img src={`${token1.coinUrl}`} alt=\"\" className=\"w-[20px[ h-[20px]\" />\n                        </div>\n                        <div className=\"font-bold\">\n                            {token1Amount}\n                        </div>\n                        <div className=\"text-right\">\n                            {token1.name}\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-[7%,73%,20%] items-center\">\n                        <div>\n                            <img src={`/icons/longdown.svg`} alt=\"\" />\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-[7%,73%,20%] items-center\">\n                        <div>\n                            <img src={`${token2.coinUrl}`} className=\"w-[20px[ h-[20px]\" alt=\"\" />\n                        </div>\n                        <div className=\"font-bold\">\n                            {parseFloat(appAmount).toFixed(2)}\n                        </div>\n                        <div className=\"text-right\">\n                            {token2.name}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex flex-col px-5 text-xs space-y-1\">\n                    <div className=\"flex justify-between\">\n                        <div>Rate:</div>\n                        <div className=\"flex\">1 {token1.name} = {!isLoading ? parseFloat(oneCoinPrice).toFixed(2) : <div className=\"px-3\"><ClipLoader size={18} /></div>} {token2.name}</div>\n                    </div>\n                    <div className=\"flex justify-between\">\n                        <div>Fee:</div>\n                        <div className=\"flex\">{!isLoading ? fee : <div className=\"px-3\"><ClipLoader size={18} /> </div>} {token1.name}</div>\n                    </div>\n                </div>\n                <div className=\"flex justify-center\">\n                    <Button className=\"w-3/5\" onClick={startSwap} isLoading={isLoading}>Confirm Swap</Button>\n                </div>\n            </div>\n        </Modal>}\n        {isSuccess && <Success onClose={(val: boolean) => dispatch(changeSuccess({ activate: val }))} />}\n        {isError && <Error onClose={(val: boolean) => dispatch(changeError({ activate: val }))} />}\n    </div>\n}\n\nexport default Swap;","import { CeloProvider } from '@celo-tools/celo-ethers-wrapper';\r\nimport { useContractKit } from '@celo-tools/use-contractkit';\r\nimport { StableToken } from '@celo/contractkit';\r\nimport { ChainId, Fetcher, Fraction, JSBI, Percent, Route, Router, TokenAmount, Trade, TradeType } from '@ubeswap/sdk';\r\nimport { utils } from 'ethers';\r\nimport { getAddress } from 'ethers/lib/utils';\r\nimport { useState } from 'react';\r\nimport { AltCoins, Coins } from 'types';\r\n\r\nexport default function useSwap() {\r\n    const { kit, address } = useContractKit()\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const Exchange = async (inputCoin: AltCoins, outputCoin: AltCoins, amount: string, slippage: string, deadline: number) => {\r\n        const provider = new CeloProvider('https://forno.celo.org')\r\n        \r\n        setLoading(true)\r\n        let token;\r\n        try {\r\n\r\n            let inputAddress = inputCoin.contractAddress;\r\n            const input = await Fetcher.fetchTokenData(ChainId.MAINNET, getAddress(inputAddress), provider);\r\n\r\n            let outputAddress = outputCoin.contractAddress;\r\n            const output = await Fetcher.fetchTokenData(ChainId.MAINNET, getAddress(outputAddress), provider);\r\n\r\n            if (inputCoin == Coins.CELO) token = await kit.contracts.getGoldToken();\r\n            else if (inputCoin === Coins.cUSD || inputCoin === Coins.cEUR || inputCoin === Coins.cREAL)\r\n                token = await kit.contracts.getStableToken((inputCoin.name as unknown) as StableToken);\r\n            else {\r\n                let altToken = inputCoin.contractAddress;\r\n                token = await kit.contracts.getErc20(altToken);\r\n            }\r\n            const addressesMain = {\r\n                ubeswapFactory: '0x62d5b84bE28a183aBB507E125B384122D2C25fAE',\r\n                ubeswapRouter: '0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121',\r\n                ubeswapMoolaRouter: '0x7D28570135A2B1930F331c507F65039D4937f66c'\r\n            };\r\n\r\n            let approve = token.approve(\r\n                addressesMain.ubeswapRouter,\r\n                kit.web3.utils.toWei(amount, 'ether')\r\n            );\r\n\r\n            let sendFunc = await approve.send();\r\n            await sendFunc.waitReceipt();\r\n\r\n            const router = new kit.connection.web3.eth.Contract(\r\n                [\r\n                    {\r\n                        inputs: [\r\n                            {\r\n                                internalType: 'uint256',\r\n                                name: 'amountIn',\r\n                                type: 'uint256'\r\n                            },\r\n                            {\r\n                                internalType: 'uint256',\r\n                                name: 'amountOutMin',\r\n                                type: 'uint256'\r\n                            },\r\n                            {\r\n                                internalType: 'address[]',\r\n                                name: 'path',\r\n                                type: 'address[]'\r\n                            },\r\n                            {\r\n                                internalType: 'address',\r\n                                name: 'to',\r\n                                type: 'address'\r\n                            },\r\n                            {\r\n                                internalType: 'uint256',\r\n                                name: 'deadline',\r\n                                type: 'uint256'\r\n                            }\r\n                        ],\r\n                        name: 'swapExactTokensForTokens',\r\n                        outputs: [\r\n                            {\r\n                                internalType: 'uint256[]',\r\n                                name: 'amounts',\r\n                                type: 'uint256[]'\r\n                            }\r\n                        ],\r\n                        stateMutability: 'nonpayable',\r\n                        type: 'function'\r\n                    }\r\n                ],\r\n                addressesMain.ubeswapRouter\r\n            );\r\n\r\n            const pair = await Fetcher.fetchPairData(output, input, provider);\r\n            const route = new Route([pair], input);\r\n            const amountIn = utils.parseUnits(amount, 'ether');\r\n            // Trade.bestTradeExactIn(pair,new TokenAmount(input, amountIn.toString()),output)\r\n            const trade = new Trade(route, new TokenAmount(input, amountIn.toString()), TradeType.EXACT_INPUT); //\r\n\r\n            const ubeRouter = Router.swapCallParameters(trade, {\r\n                feeOnTransfer: false,\r\n                allowedSlippage: new Percent(slippage, '1000'),\r\n                recipient: address!,\r\n                ttl: deadline\r\n            });\r\n\r\n            const txx = await router.methods.swapExactTokensForTokens(...ubeRouter.args);\r\n\r\n            const sender = await txx.send({ from: address });\r\n            setLoading(false)\r\n            return { hash: sender.transactionHash }\r\n        } catch (e: any) {\r\n            throw new Error(e);\r\n        }\r\n    }\r\n\r\n    const MinmumAmountOut = async (inputCoin: AltCoins, outputCoin: AltCoins, amount: string, slippage: string, deadline: number) => {\r\n        console.log(amount)\r\n        const provider = new CeloProvider('https://forno.celo.org')\r\n        setLoading(true)\r\n        let priceImpactWithoutFeePercent;\r\n        let feeAmount: any = 0;\r\n        try {\r\n\r\n            let inputAddress = inputCoin.contractAddress;\r\n            const input = await Fetcher.fetchTokenData(ChainId.MAINNET, getAddress(inputAddress), provider);\r\n\r\n            let outputAddress = outputCoin.contractAddress;\r\n            const output = await Fetcher.fetchTokenData(ChainId.MAINNET, getAddress(outputAddress), provider);\r\n\r\n            const pair = await Fetcher.fetchPairData(output, input, provider);\r\n            const route = new Route([pair], input);\r\n\r\n            let minimumAmountOut = \"0\";\r\n\r\n            if (parseFloat(amount) > 0) {\r\n                const amountIn = utils.parseUnits(amount, 'ether');\r\n                const trade = new Trade(route, new TokenAmount(input, amountIn.toString()), TradeType.EXACT_INPUT); //\r\n\r\n\r\n                const BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\r\n                const ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\r\n                const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\r\n\r\n                const realizedLPFee = !trade\r\n                    ? undefined\r\n                    : ONE_HUNDRED_PERCENT.subtract(\r\n                        trade.route.pairs.reduce<Fraction>(\r\n                            (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\r\n                            ONE_HUNDRED_PERCENT\r\n                        )\r\n                    )\r\n\r\n                const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\r\n\r\n                priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\r\n                    ? new Percent(priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction.denominator)\r\n                    : undefined\r\n\r\n                feeAmount =\r\n                    realizedLPFee &&\r\n                    trade &&\r\n                    new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\r\n\r\n                feeAmount = feeAmount.toSignificant(4)\r\n                const amountOut = trade.minimumAmountOut(new Percent(slippage.toString(), '1000'));\r\n                minimumAmountOut = amountOut.raw.toString();\r\n                minimumAmountOut = kit.web3.utils.fromWei(minimumAmountOut, 'ether');\r\n            }\r\n\r\n            const oneCoin = utils.parseUnits('1', 'ether');\r\n            const tradeOne = new Trade(route, new TokenAmount(input, oneCoin.toString()), TradeType.EXACT_INPUT); //\r\n\r\n            const amountOutOne = tradeOne.minimumAmountOut(new Percent(slippage, '1000'));\r\n            let minimumAmountOutOne = amountOutOne.raw.toString();\r\n            minimumAmountOutOne = kit.web3.utils.fromWei(minimumAmountOutOne, 'ether');\r\n\r\n            setLoading(false)\r\n            return { minimumAmountOut, oneTokenValue: minimumAmountOutOne, feeAmount: feeAmount };\r\n        } catch (e: any) {\r\n            throw new Error(e);\r\n        }\r\n    }\r\n\r\n    return { Exchange, MinmumAmountOut, isLoading};\r\n}\r\n"],"sourceRoot":""}